syntax = "proto3";
option java_package = "edu.jhu.order.deephealth";

package idl;

import "google/protobuf/timestamp.proto";

import "health.proto";

// Definition for the health service
service HealthService {
	// Add a subject to the observing subject list
  rpc Observe(ObserveRequest) returns (ObserveReply) {}

	// Stop observing a particular subject, all the reports
	// concerning this subject will be ignored
  rpc StopObserving(ObserveRequest) returns (ObserveReply) {}

	// Submit a report to the view storage
  rpc SubmitReport(SubmitReportRequest) returns (SubmitReportReply) {}

	// Learn a report from a peer 
  rpc LearnReport(LearnReportRequest) returns (LearnReportReply) {}

	// Query the latest raw health report of an entity
  rpc GetLatestReport(GetReportRequest) returns (GetReportReply) {}

	// Query all raw health report of an entity
  rpc GetPanorama(GetReportRequest) returns (stream GetReportReply) {}

	// Query all raw health report of an entity
  rpc GetView(GetViewRequest) returns (stream GetReportReply) {}

	// Query all raw health report of an entity
  rpc GetInference(GetInferenceRequest) returns (GetInferenceReply) {}

  // ping request to test liveness of a health server
  rpc Ping(PingRequest) returns (PingReply) {}
}

message Peer {
  string id = 1;
  string addr = 2;
}

message ObserveRequest {
  string subject = 1;
}

message ObserveReply {
  bool success = 1;
}

message LearnReportRequest {
  Peer source = 1;
  Report report = 2;
}

message LearnReportReply {
  enum Status {
    IGNORED = 0;
    ACCEPTED = 1;
    FAILED = 2;
  }
  Status result = 1;
}

message SubmitReportRequest {
  Report report = 1;
}

message SubmitReportReply {
  enum Status {
    IGNORED = 0;
    ACCEPTED = 1;
    FAILED = 2;
  }
  Status result = 1;
}

message GetViewRequest {
  string subject = 1;
  string observer = 2;
}

message GetReportRequest {
  string subject = 1;
}

message GetReportReply {
  Report report = 1;
}

message GetInferenceRequest {
  string subject = 1;
}

message GetInferenceReply {
  Inference inference = 1;
}

message PingRequest {
  Peer source = 1;
  google.protobuf.Timestamp time = 2; 
}

message PingReply {
  enum Status {
    GOOD = 0;
    BAD = 1;
  }
  Status result = 1;
  google.protobuf.Timestamp time = 2; 
}
